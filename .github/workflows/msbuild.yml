name: MSBuild on Windows

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: updater\updater.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    # InnoSetup 6.1.2 is already installed on the Windows 2019 image. See
    # <https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md>
    # for pre-installed software.

    - name: Create installer
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Running custom commands / executables is unnecessarily complicated in
      # PowerShell, so I guess we have to do it that way.
      run: |
        $command = '"C:\Program Files (x86)\Inno Setup 6\iscc.exe" "setup\setup.iss"'
        Invoke-Expression "& $command"

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: installer
        path: output\*.exe
